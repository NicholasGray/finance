/*
 * Simple Inventory API
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SimpleInventoryApi);
  }
}(this, function(expect, SimpleInventoryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SimpleInventoryApi.DevelopersApi();
  });

  describe('(package)', function() {
    describe('DevelopersApi', function() {
      describe('searchInventory', function() {
        it('should call searchInventory successfully', function(done) {
          // TODO: uncomment, update parameter values for searchInventory call and complete the assertions
          /*
          var opts = {};
          opts.searchString = "searchString_example";
          opts.skip = 56;
          opts.limit = 56;

          instance.searchInventory(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SimpleInventoryApi.InventoryItem);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("d290f1ee-6c54-4b01-90e6-d701748f0851");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("Widget Adapter");
              expect(data.releaseDate).to.be.a(Date);
              expect(data.releaseDate).to.be(2016-08-29T09:12:33.001Z);
              expect(data.manufacturer).to.be.a(SimpleInventoryApi.Manufacturer);
                    expect(data.manufacturer.name).to.be.a('string');
                expect(data.manufacturer.name).to.be("ACME Corporation");
                expect(data.manufacturer.homePage).to.be.a('string');
                expect(data.manufacturer.homePage).to.be("https://www.acme-corp.com");
                expect(data.manufacturer.phone).to.be.a('string');
                expect(data.manufacturer.phone).to.be("408-867-5309");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchUser', function() {
        it('should call searchUser successfully', function(done) {
          // TODO: uncomment, update parameter values for searchUser call and complete the assertions
          /*
          var opts = {};
          opts.searchString = "searchString_example";
          opts.skip = 56;
          opts.limit = 56;

          instance.searchUser(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SimpleInventoryApi.Login);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.userID).to.be.a('string');
              expect(data.userID).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
